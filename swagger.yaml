---
swagger: "2.0"
info:
  description: "This is the API list of tour cost manager.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  version: "1.0.5"
  title: "Swagger Tour Cost Manager"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "zahirulislam261@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "example.tcm.io"
basePath: "/api"
tags:
- name: "Tours"
  description: "All about tour"
- name: "store"
  description: "All about tour"
- name: "user"
  description: "All about tour"
schemes:
- "https"
- "http"
paths:
  /v1/tours:
    post:
      tags:
      - "Tours"
      summary: "Create a new tour"
      description: ""
      operationId: "createTour"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "tour"
        description: "Tour object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/TourRequestBody"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Tour"
        400:
          description: "Authorization Error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
        401:
          description: "Authorization Error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
    get:
      tags:
      - "Tours"
      summary: "Get all the tours user participated in"
      description: "Returns list of tours"
      operationId: "getAllTours"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tour"
        400:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
        401:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
  /v1/tours/{tour_id}:
    get:
      tags:
      - "Tours"
      summary: "Find tour by Id"
      description: "Returns a single tour"
      operationId: "getTourById"
      produces:
      - "application/json"
      parameters:
      - name: "tour_id"
        in: "path"
        description: "Id of the tour to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Tour"
        400:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
        401:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
        403:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
        404:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
    patch:
      tags:
      - "Tours"
      summary: "Update an existing tour"
      description: ""
      operationId: "updateTour"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "tour_id"
        description: "Id of the tour that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Tour object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/TourRequestBody"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Tour"
        400:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
        401:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
        403:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
        404:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
definitions:
  TourRequestBody:
    type: "object"
    required:
    - "title"
    properties:
      title:
        type: "string"
        example: "Year End Tour"
      description:
        type: "string"
        example: "This is the last tour of 2023"
      place:
        type: "string"
        example: "Nagoya and Gifu"
      date:
        type: "string"
        example: "2023-12-11"
  Tour:
    type: "object"
    required:
    - "title"
    - "status"
    properties:
      title:
        type: "string"
        example: "Year End Tour"
      description:
        type: "string"
        example: "This is the last tour of 2023"
      place:
        type: "string"
        example: "Nagoya and Gifu"
      date:
        type: "string"
        example: "2023-12-11"
      created_by:
        type: "string"
        example: "Tanaka Hashima"
      status:
        type: "string"
        description: "Tour Status"
        enum:
        - "open"
        - "closed"
        - "canceled"
  Error:
    type: "object"
    required:
    - "code"
    - "source"
    - "message"
    properties:
      code:
        type: "string"
        example: "RESOURCE_NOT_FOUND"
      source:
        type: "string"
        example: "tour_id"
      message:
        type: "string"
        example: "Resource is not available"
